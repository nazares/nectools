<?php

declare(strict_types=1);

namespace app\libs;

final class NEC
{
    private static array $letters = [
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        ' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?',
        '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '¥', ']', '^', '_',
        '', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '→', '←',
        'ɋ', 'ü', 'é', 'â', 'ä', 'à', 'å', 'ç', 'ê', 'ë', 'è', 'ï', 'î', 'ì', 'Ä', 'Å',
        'É', 'æ', 'Æ', 'ô', 'ö', 'ò', 'û', 'ù', 'ÿ', 'Ö', 'Ü', '¢', '£', '', 'ķ', 'ƒ',
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
        '', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н',
        'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э',
        'Ю', 'Я', 'ö', 'I', 'ù', '÷', 'ı', 'ú', '€', '', '', '', '', '', '', '',
        'Į', 'ä', 'ȕ', 'İ', 'µ', 'ı', 'ȡ', 'q', '', '', 'j', '', '¢', 'ǧ', 'n', 'ö',
        'Þ', '', 'ș', 'Ȧ', 'ȍ', 'ü', 'Ȉ', 'ʌ', 'x', 'y', '', '', '', '', ''
    ];

    public static function encode(string $string): string
    {
        $out = '';
        $chars = mb_str_split(mb_strtoupper($string));
        foreach ($chars as $char) {
            $out .= strtoupper(dechex(array_search($char, self::$letters)));
        }
        return substr($out, 0, 32);
    }

    public static function decode(string $string): string
    {
        $out = '';
        $code = mb_str_split($string, 2);
        foreach ($code as $byte) {
            $out .= self::$letters[hexdec($byte)];
        }
        return $out;
    }
}
